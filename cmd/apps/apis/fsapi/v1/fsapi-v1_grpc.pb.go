// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: cmd/apps/apis/fsapi/v1/fsapi-v1.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	AccessToken(ctx context.Context, in *AccessTokenRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) AccessToken(ctx context.Context, in *AccessTokenRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error) {
	out := new(AccessTokenResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Auth/AccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations should embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	AccessToken(context.Context, *AccessTokenRequest) (*AccessTokenResponse, error)
}

// UnimplementedAuthServer should be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) AccessToken(context.Context, *AccessTokenRequest) (*AccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessToken not implemented")
}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_AccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Auth/AccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AccessToken(ctx, req.(*AccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccessToken",
			Handler:    _Auth_AccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/apps/apis/fsapi/v1/fsapi-v1.proto",
}

// InboxClient is the client API for Inbox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InboxClient interface {
	QuickInbox(ctx context.Context, in *QuickInboxRequest, opts ...grpc.CallOption) (*QuickInboxResponse, error)
}

type inboxClient struct {
	cc grpc.ClientConnInterface
}

func NewInboxClient(cc grpc.ClientConnInterface) InboxClient {
	return &inboxClient{cc}
}

func (c *inboxClient) QuickInbox(ctx context.Context, in *QuickInboxRequest, opts ...grpc.CallOption) (*QuickInboxResponse, error) {
	out := new(QuickInboxResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Inbox/QuickInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InboxServer is the server API for Inbox service.
// All implementations should embed UnimplementedInboxServer
// for forward compatibility
type InboxServer interface {
	QuickInbox(context.Context, *QuickInboxRequest) (*QuickInboxResponse, error)
}

// UnimplementedInboxServer should be embedded to have forward compatible implementations.
type UnimplementedInboxServer struct {
}

func (UnimplementedInboxServer) QuickInbox(context.Context, *QuickInboxRequest) (*QuickInboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuickInbox not implemented")
}

// UnsafeInboxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InboxServer will
// result in compilation errors.
type UnsafeInboxServer interface {
	mustEmbedUnimplementedInboxServer()
}

func RegisterInboxServer(s grpc.ServiceRegistrar, srv InboxServer) {
	s.RegisterService(&Inbox_ServiceDesc, srv)
}

func _Inbox_QuickInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuickInboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboxServer).QuickInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Inbox/QuickInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboxServer).QuickInbox(ctx, req.(*QuickInboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Inbox_ServiceDesc is the grpc.ServiceDesc for Inbox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Inbox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Inbox",
	HandlerType: (*InboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QuickInbox",
			Handler:    _Inbox_QuickInbox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/apps/apis/fsapi/v1/fsapi-v1.proto",
}

// EntriesClient is the client API for Entries service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntriesClient interface {
	GroupTree(ctx context.Context, in *GetGroupTreeRequest, opts ...grpc.CallOption) (*GetGroupTreeResponse, error)
	FindEntryDetail(ctx context.Context, in *FindEntryDetailRequest, opts ...grpc.CallOption) (*GetEntryDetailResponse, error)
	GetEntryDetail(ctx context.Context, in *GetEntryDetailRequest, opts ...grpc.CallOption) (*GetEntryDetailResponse, error)
	CreateEntry(ctx context.Context, in *CreateEntryRequest, opts ...grpc.CallOption) (*CreateEntryResponse, error)
	UpdateEntry(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*UpdateEntryResponse, error)
	DeleteEntry(ctx context.Context, in *DeleteEntryRequest, opts ...grpc.CallOption) (*DeleteEntryResponse, error)
	ListGroupChildren(ctx context.Context, in *ListGroupChildrenRequest, opts ...grpc.CallOption) (*ListGroupChildrenResponse, error)
	ChangeParent(ctx context.Context, in *ChangeParentRequest, opts ...grpc.CallOption) (*ChangeParentResponse, error)
	WriteFile(ctx context.Context, opts ...grpc.CallOption) (Entries_WriteFileClient, error)
	ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (Entries_ReadFileClient, error)
}

type entriesClient struct {
	cc grpc.ClientConnInterface
}

func NewEntriesClient(cc grpc.ClientConnInterface) EntriesClient {
	return &entriesClient{cc}
}

func (c *entriesClient) GroupTree(ctx context.Context, in *GetGroupTreeRequest, opts ...grpc.CallOption) (*GetGroupTreeResponse, error) {
	out := new(GetGroupTreeResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Entries/GroupTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entriesClient) FindEntryDetail(ctx context.Context, in *FindEntryDetailRequest, opts ...grpc.CallOption) (*GetEntryDetailResponse, error) {
	out := new(GetEntryDetailResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Entries/FindEntryDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entriesClient) GetEntryDetail(ctx context.Context, in *GetEntryDetailRequest, opts ...grpc.CallOption) (*GetEntryDetailResponse, error) {
	out := new(GetEntryDetailResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Entries/GetEntryDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entriesClient) CreateEntry(ctx context.Context, in *CreateEntryRequest, opts ...grpc.CallOption) (*CreateEntryResponse, error) {
	out := new(CreateEntryResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Entries/CreateEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entriesClient) UpdateEntry(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*UpdateEntryResponse, error) {
	out := new(UpdateEntryResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Entries/UpdateEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entriesClient) DeleteEntry(ctx context.Context, in *DeleteEntryRequest, opts ...grpc.CallOption) (*DeleteEntryResponse, error) {
	out := new(DeleteEntryResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Entries/DeleteEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entriesClient) ListGroupChildren(ctx context.Context, in *ListGroupChildrenRequest, opts ...grpc.CallOption) (*ListGroupChildrenResponse, error) {
	out := new(ListGroupChildrenResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Entries/ListGroupChildren", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entriesClient) ChangeParent(ctx context.Context, in *ChangeParentRequest, opts ...grpc.CallOption) (*ChangeParentResponse, error) {
	out := new(ChangeParentResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Entries/ChangeParent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entriesClient) WriteFile(ctx context.Context, opts ...grpc.CallOption) (Entries_WriteFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Entries_ServiceDesc.Streams[0], "/api.v1.Entries/WriteFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &entriesWriteFileClient{stream}
	return x, nil
}

type Entries_WriteFileClient interface {
	Send(*WriteFileRequest) error
	CloseAndRecv() (*WriteFileResponse, error)
	grpc.ClientStream
}

type entriesWriteFileClient struct {
	grpc.ClientStream
}

func (x *entriesWriteFileClient) Send(m *WriteFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *entriesWriteFileClient) CloseAndRecv() (*WriteFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *entriesClient) ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (Entries_ReadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Entries_ServiceDesc.Streams[1], "/api.v1.Entries/ReadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &entriesReadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Entries_ReadFileClient interface {
	Recv() (*ReadFileResponse, error)
	grpc.ClientStream
}

type entriesReadFileClient struct {
	grpc.ClientStream
}

func (x *entriesReadFileClient) Recv() (*ReadFileResponse, error) {
	m := new(ReadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EntriesServer is the server API for Entries service.
// All implementations should embed UnimplementedEntriesServer
// for forward compatibility
type EntriesServer interface {
	GroupTree(context.Context, *GetGroupTreeRequest) (*GetGroupTreeResponse, error)
	FindEntryDetail(context.Context, *FindEntryDetailRequest) (*GetEntryDetailResponse, error)
	GetEntryDetail(context.Context, *GetEntryDetailRequest) (*GetEntryDetailResponse, error)
	CreateEntry(context.Context, *CreateEntryRequest) (*CreateEntryResponse, error)
	UpdateEntry(context.Context, *UpdateEntryRequest) (*UpdateEntryResponse, error)
	DeleteEntry(context.Context, *DeleteEntryRequest) (*DeleteEntryResponse, error)
	ListGroupChildren(context.Context, *ListGroupChildrenRequest) (*ListGroupChildrenResponse, error)
	ChangeParent(context.Context, *ChangeParentRequest) (*ChangeParentResponse, error)
	WriteFile(Entries_WriteFileServer) error
	ReadFile(*ReadFileRequest, Entries_ReadFileServer) error
}

// UnimplementedEntriesServer should be embedded to have forward compatible implementations.
type UnimplementedEntriesServer struct {
}

func (UnimplementedEntriesServer) GroupTree(context.Context, *GetGroupTreeRequest) (*GetGroupTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupTree not implemented")
}
func (UnimplementedEntriesServer) FindEntryDetail(context.Context, *FindEntryDetailRequest) (*GetEntryDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEntryDetail not implemented")
}
func (UnimplementedEntriesServer) GetEntryDetail(context.Context, *GetEntryDetailRequest) (*GetEntryDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntryDetail not implemented")
}
func (UnimplementedEntriesServer) CreateEntry(context.Context, *CreateEntryRequest) (*CreateEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntry not implemented")
}
func (UnimplementedEntriesServer) UpdateEntry(context.Context, *UpdateEntryRequest) (*UpdateEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntry not implemented")
}
func (UnimplementedEntriesServer) DeleteEntry(context.Context, *DeleteEntryRequest) (*DeleteEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntry not implemented")
}
func (UnimplementedEntriesServer) ListGroupChildren(context.Context, *ListGroupChildrenRequest) (*ListGroupChildrenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupChildren not implemented")
}
func (UnimplementedEntriesServer) ChangeParent(context.Context, *ChangeParentRequest) (*ChangeParentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeParent not implemented")
}
func (UnimplementedEntriesServer) WriteFile(Entries_WriteFileServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (UnimplementedEntriesServer) ReadFile(*ReadFileRequest, Entries_ReadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}

// UnsafeEntriesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntriesServer will
// result in compilation errors.
type UnsafeEntriesServer interface {
	mustEmbedUnimplementedEntriesServer()
}

func RegisterEntriesServer(s grpc.ServiceRegistrar, srv EntriesServer) {
	s.RegisterService(&Entries_ServiceDesc, srv)
}

func _Entries_GroupTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).GroupTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Entries/GroupTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).GroupTree(ctx, req.(*GetGroupTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entries_FindEntryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEntryDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).FindEntryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Entries/FindEntryDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).FindEntryDetail(ctx, req.(*FindEntryDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entries_GetEntryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).GetEntryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Entries/GetEntryDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).GetEntryDetail(ctx, req.(*GetEntryDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entries_CreateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).CreateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Entries/CreateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).CreateEntry(ctx, req.(*CreateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entries_UpdateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).UpdateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Entries/UpdateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).UpdateEntry(ctx, req.(*UpdateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entries_DeleteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).DeleteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Entries/DeleteEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).DeleteEntry(ctx, req.(*DeleteEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entries_ListGroupChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupChildrenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).ListGroupChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Entries/ListGroupChildren",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).ListGroupChildren(ctx, req.(*ListGroupChildrenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entries_ChangeParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeParentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).ChangeParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Entries/ChangeParent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).ChangeParent(ctx, req.(*ChangeParentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entries_WriteFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EntriesServer).WriteFile(&entriesWriteFileServer{stream})
}

type Entries_WriteFileServer interface {
	SendAndClose(*WriteFileResponse) error
	Recv() (*WriteFileRequest, error)
	grpc.ServerStream
}

type entriesWriteFileServer struct {
	grpc.ServerStream
}

func (x *entriesWriteFileServer) SendAndClose(m *WriteFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *entriesWriteFileServer) Recv() (*WriteFileRequest, error) {
	m := new(WriteFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Entries_ReadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EntriesServer).ReadFile(m, &entriesReadFileServer{stream})
}

type Entries_ReadFileServer interface {
	Send(*ReadFileResponse) error
	grpc.ServerStream
}

type entriesReadFileServer struct {
	grpc.ServerStream
}

func (x *entriesReadFileServer) Send(m *ReadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Entries_ServiceDesc is the grpc.ServiceDesc for Entries service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Entries_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Entries",
	HandlerType: (*EntriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GroupTree",
			Handler:    _Entries_GroupTree_Handler,
		},
		{
			MethodName: "FindEntryDetail",
			Handler:    _Entries_FindEntryDetail_Handler,
		},
		{
			MethodName: "GetEntryDetail",
			Handler:    _Entries_GetEntryDetail_Handler,
		},
		{
			MethodName: "CreateEntry",
			Handler:    _Entries_CreateEntry_Handler,
		},
		{
			MethodName: "UpdateEntry",
			Handler:    _Entries_UpdateEntry_Handler,
		},
		{
			MethodName: "DeleteEntry",
			Handler:    _Entries_DeleteEntry_Handler,
		},
		{
			MethodName: "ListGroupChildren",
			Handler:    _Entries_ListGroupChildren_Handler,
		},
		{
			MethodName: "ChangeParent",
			Handler:    _Entries_ChangeParent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WriteFile",
			Handler:       _Entries_WriteFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadFile",
			Handler:       _Entries_ReadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cmd/apps/apis/fsapi/v1/fsapi-v1.proto",
}

// PropertiesClient is the client API for Properties service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PropertiesClient interface {
	AddProperty(ctx context.Context, in *AddPropertyRequest, opts ...grpc.CallOption) (*AddPropertyResponse, error)
	UpdateProperty(ctx context.Context, in *UpdatePropertyRequest, opts ...grpc.CallOption) (*UpdatePropertyResponse, error)
	DeleteProperty(ctx context.Context, in *DeletePropertyRequest, opts ...grpc.CallOption) (*DeletePropertyResponse, error)
}

type propertiesClient struct {
	cc grpc.ClientConnInterface
}

func NewPropertiesClient(cc grpc.ClientConnInterface) PropertiesClient {
	return &propertiesClient{cc}
}

func (c *propertiesClient) AddProperty(ctx context.Context, in *AddPropertyRequest, opts ...grpc.CallOption) (*AddPropertyResponse, error) {
	out := new(AddPropertyResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Properties/AddProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertiesClient) UpdateProperty(ctx context.Context, in *UpdatePropertyRequest, opts ...grpc.CallOption) (*UpdatePropertyResponse, error) {
	out := new(UpdatePropertyResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Properties/UpdateProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertiesClient) DeleteProperty(ctx context.Context, in *DeletePropertyRequest, opts ...grpc.CallOption) (*DeletePropertyResponse, error) {
	out := new(DeletePropertyResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Properties/DeleteProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PropertiesServer is the server API for Properties service.
// All implementations should embed UnimplementedPropertiesServer
// for forward compatibility
type PropertiesServer interface {
	AddProperty(context.Context, *AddPropertyRequest) (*AddPropertyResponse, error)
	UpdateProperty(context.Context, *UpdatePropertyRequest) (*UpdatePropertyResponse, error)
	DeleteProperty(context.Context, *DeletePropertyRequest) (*DeletePropertyResponse, error)
}

// UnimplementedPropertiesServer should be embedded to have forward compatible implementations.
type UnimplementedPropertiesServer struct {
}

func (UnimplementedPropertiesServer) AddProperty(context.Context, *AddPropertyRequest) (*AddPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProperty not implemented")
}
func (UnimplementedPropertiesServer) UpdateProperty(context.Context, *UpdatePropertyRequest) (*UpdatePropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProperty not implemented")
}
func (UnimplementedPropertiesServer) DeleteProperty(context.Context, *DeletePropertyRequest) (*DeletePropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProperty not implemented")
}

// UnsafePropertiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PropertiesServer will
// result in compilation errors.
type UnsafePropertiesServer interface {
	mustEmbedUnimplementedPropertiesServer()
}

func RegisterPropertiesServer(s grpc.ServiceRegistrar, srv PropertiesServer) {
	s.RegisterService(&Properties_ServiceDesc, srv)
}

func _Properties_AddProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertiesServer).AddProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Properties/AddProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertiesServer).AddProperty(ctx, req.(*AddPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Properties_UpdateProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertiesServer).UpdateProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Properties/UpdateProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertiesServer).UpdateProperty(ctx, req.(*UpdatePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Properties_DeleteProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertiesServer).DeleteProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Properties/DeleteProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertiesServer).DeleteProperty(ctx, req.(*DeletePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Properties_ServiceDesc is the grpc.ServiceDesc for Properties service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Properties_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Properties",
	HandlerType: (*PropertiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProperty",
			Handler:    _Properties_AddProperty_Handler,
		},
		{
			MethodName: "UpdateProperty",
			Handler:    _Properties_UpdateProperty_Handler,
		},
		{
			MethodName: "DeleteProperty",
			Handler:    _Properties_DeleteProperty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/apps/apis/fsapi/v1/fsapi-v1.proto",
}

// DocumentClient is the client API for Document service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentClient interface {
	ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error)
	GetDocumentDetail(ctx context.Context, in *GetDocumentDetailRequest, opts ...grpc.CallOption) (*GetDocumentDetailResponse, error)
	UpdateDocument(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*UpdateDocumentResponse, error)
	SearchDocuments(ctx context.Context, in *SearchDocumentsRequest, opts ...grpc.CallOption) (*SearchDocumentsResponse, error)
}

type documentClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentClient(cc grpc.ClientConnInterface) DocumentClient {
	return &documentClient{cc}
}

func (c *documentClient) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error) {
	out := new(ListDocumentsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Document/ListDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentClient) GetDocumentDetail(ctx context.Context, in *GetDocumentDetailRequest, opts ...grpc.CallOption) (*GetDocumentDetailResponse, error) {
	out := new(GetDocumentDetailResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Document/GetDocumentDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentClient) UpdateDocument(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*UpdateDocumentResponse, error) {
	out := new(UpdateDocumentResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Document/UpdateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentClient) SearchDocuments(ctx context.Context, in *SearchDocumentsRequest, opts ...grpc.CallOption) (*SearchDocumentsResponse, error) {
	out := new(SearchDocumentsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Document/SearchDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentServer is the server API for Document service.
// All implementations should embed UnimplementedDocumentServer
// for forward compatibility
type DocumentServer interface {
	ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error)
	GetDocumentDetail(context.Context, *GetDocumentDetailRequest) (*GetDocumentDetailResponse, error)
	UpdateDocument(context.Context, *UpdateDocumentRequest) (*UpdateDocumentResponse, error)
	SearchDocuments(context.Context, *SearchDocumentsRequest) (*SearchDocumentsResponse, error)
}

// UnimplementedDocumentServer should be embedded to have forward compatible implementations.
type UnimplementedDocumentServer struct {
}

func (UnimplementedDocumentServer) ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (UnimplementedDocumentServer) GetDocumentDetail(context.Context, *GetDocumentDetailRequest) (*GetDocumentDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentDetail not implemented")
}
func (UnimplementedDocumentServer) UpdateDocument(context.Context, *UpdateDocumentRequest) (*UpdateDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (UnimplementedDocumentServer) SearchDocuments(context.Context, *SearchDocumentsRequest) (*SearchDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDocuments not implemented")
}

// UnsafeDocumentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentServer will
// result in compilation errors.
type UnsafeDocumentServer interface {
	mustEmbedUnimplementedDocumentServer()
}

func RegisterDocumentServer(s grpc.ServiceRegistrar, srv DocumentServer) {
	s.RegisterService(&Document_ServiceDesc, srv)
}

func _Document_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Document/ListDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).ListDocuments(ctx, req.(*ListDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Document_GetDocumentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).GetDocumentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Document/GetDocumentDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).GetDocumentDetail(ctx, req.(*GetDocumentDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Document_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Document/UpdateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).UpdateDocument(ctx, req.(*UpdateDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Document_SearchDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).SearchDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Document/SearchDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).SearchDocuments(ctx, req.(*SearchDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Document_ServiceDesc is the grpc.ServiceDesc for Document service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Document_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Document",
	HandlerType: (*DocumentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDocuments",
			Handler:    _Document_ListDocuments_Handler,
		},
		{
			MethodName: "GetDocumentDetail",
			Handler:    _Document_GetDocumentDetail_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _Document_UpdateDocument_Handler,
		},
		{
			MethodName: "SearchDocuments",
			Handler:    _Document_SearchDocuments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/apps/apis/fsapi/v1/fsapi-v1.proto",
}

// RoomClient is the client API for Room service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomClient interface {
	ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error)
	OpenRoom(ctx context.Context, in *OpenRoomRequest, opts ...grpc.CallOption) (*OpenRoomResponse, error)
	UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*UpdateRoomResponse, error)
	DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error)
	ClearRoom(ctx context.Context, in *ClearRoomRequest, opts ...grpc.CallOption) (*ClearRoomResponse, error)
	ChatInRoom(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (Room_ChatInRoomClient, error)
}

type roomClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomClient(cc grpc.ClientConnInterface) RoomClient {
	return &roomClient{cc}
}

func (c *roomClient) ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error) {
	out := new(ListRoomsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Room/ListRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) OpenRoom(ctx context.Context, in *OpenRoomRequest, opts ...grpc.CallOption) (*OpenRoomResponse, error) {
	out := new(OpenRoomResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Room/OpenRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*UpdateRoomResponse, error) {
	out := new(UpdateRoomResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Room/UpdateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error) {
	out := new(DeleteRoomResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Room/DeleteRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) ClearRoom(ctx context.Context, in *ClearRoomRequest, opts ...grpc.CallOption) (*ClearRoomResponse, error) {
	out := new(ClearRoomResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Room/ClearRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) ChatInRoom(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (Room_ChatInRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &Room_ServiceDesc.Streams[0], "/api.v1.Room/ChatInRoom", opts...)
	if err != nil {
		return nil, err
	}
	x := &roomChatInRoomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Room_ChatInRoomClient interface {
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type roomChatInRoomClient struct {
	grpc.ClientStream
}

func (x *roomChatInRoomClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RoomServer is the server API for Room service.
// All implementations should embed UnimplementedRoomServer
// for forward compatibility
type RoomServer interface {
	ListRooms(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error)
	OpenRoom(context.Context, *OpenRoomRequest) (*OpenRoomResponse, error)
	UpdateRoom(context.Context, *UpdateRoomRequest) (*UpdateRoomResponse, error)
	DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error)
	ClearRoom(context.Context, *ClearRoomRequest) (*ClearRoomResponse, error)
	ChatInRoom(*ChatRequest, Room_ChatInRoomServer) error
}

// UnimplementedRoomServer should be embedded to have forward compatible implementations.
type UnimplementedRoomServer struct {
}

func (UnimplementedRoomServer) ListRooms(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRooms not implemented")
}
func (UnimplementedRoomServer) OpenRoom(context.Context, *OpenRoomRequest) (*OpenRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenRoom not implemented")
}
func (UnimplementedRoomServer) UpdateRoom(context.Context, *UpdateRoomRequest) (*UpdateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoom not implemented")
}
func (UnimplementedRoomServer) DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedRoomServer) ClearRoom(context.Context, *ClearRoomRequest) (*ClearRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearRoom not implemented")
}
func (UnimplementedRoomServer) ChatInRoom(*ChatRequest, Room_ChatInRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatInRoom not implemented")
}

// UnsafeRoomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomServer will
// result in compilation errors.
type UnsafeRoomServer interface {
	mustEmbedUnimplementedRoomServer()
}

func RegisterRoomServer(s grpc.ServiceRegistrar, srv RoomServer) {
	s.RegisterService(&Room_ServiceDesc, srv)
}

func _Room_ListRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).ListRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Room/ListRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).ListRooms(ctx, req.(*ListRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_OpenRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).OpenRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Room/OpenRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).OpenRoom(ctx, req.(*OpenRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_UpdateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).UpdateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Room/UpdateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).UpdateRoom(ctx, req.(*UpdateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Room/DeleteRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).DeleteRoom(ctx, req.(*DeleteRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_ClearRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).ClearRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Room/ClearRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).ClearRoom(ctx, req.(*ClearRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_ChatInRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoomServer).ChatInRoom(m, &roomChatInRoomServer{stream})
}

type Room_ChatInRoomServer interface {
	Send(*ChatResponse) error
	grpc.ServerStream
}

type roomChatInRoomServer struct {
	grpc.ServerStream
}

func (x *roomChatInRoomServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Room_ServiceDesc is the grpc.ServiceDesc for Room service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Room_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Room",
	HandlerType: (*RoomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRooms",
			Handler:    _Room_ListRooms_Handler,
		},
		{
			MethodName: "OpenRoom",
			Handler:    _Room_OpenRoom_Handler,
		},
		{
			MethodName: "UpdateRoom",
			Handler:    _Room_UpdateRoom_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _Room_DeleteRoom_Handler,
		},
		{
			MethodName: "ClearRoom",
			Handler:    _Room_ClearRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatInRoom",
			Handler:       _Room_ChatInRoom_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cmd/apps/apis/fsapi/v1/fsapi-v1.proto",
}

// NotifyClient is the client API for Notify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifyClient interface {
	GetLatestSequence(ctx context.Context, in *GetLatestSequenceRequest, opts ...grpc.CallOption) (*GetLatestSequenceResponse, error)
	ListUnSyncedEvent(ctx context.Context, in *ListUnSyncedEventRequest, opts ...grpc.CallOption) (*ListUnSyncedEventResponse, error)
	CommitSyncedEvent(ctx context.Context, in *CommitSyncedEventRequest, opts ...grpc.CallOption) (*CommitSyncedEventResponse, error)
}

type notifyClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifyClient(cc grpc.ClientConnInterface) NotifyClient {
	return &notifyClient{cc}
}

func (c *notifyClient) GetLatestSequence(ctx context.Context, in *GetLatestSequenceRequest, opts ...grpc.CallOption) (*GetLatestSequenceResponse, error) {
	out := new(GetLatestSequenceResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Notify/GetLatestSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyClient) ListUnSyncedEvent(ctx context.Context, in *ListUnSyncedEventRequest, opts ...grpc.CallOption) (*ListUnSyncedEventResponse, error) {
	out := new(ListUnSyncedEventResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Notify/ListUnSyncedEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyClient) CommitSyncedEvent(ctx context.Context, in *CommitSyncedEventRequest, opts ...grpc.CallOption) (*CommitSyncedEventResponse, error) {
	out := new(CommitSyncedEventResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Notify/CommitSyncedEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifyServer is the server API for Notify service.
// All implementations should embed UnimplementedNotifyServer
// for forward compatibility
type NotifyServer interface {
	GetLatestSequence(context.Context, *GetLatestSequenceRequest) (*GetLatestSequenceResponse, error)
	ListUnSyncedEvent(context.Context, *ListUnSyncedEventRequest) (*ListUnSyncedEventResponse, error)
	CommitSyncedEvent(context.Context, *CommitSyncedEventRequest) (*CommitSyncedEventResponse, error)
}

// UnimplementedNotifyServer should be embedded to have forward compatible implementations.
type UnimplementedNotifyServer struct {
}

func (UnimplementedNotifyServer) GetLatestSequence(context.Context, *GetLatestSequenceRequest) (*GetLatestSequenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestSequence not implemented")
}
func (UnimplementedNotifyServer) ListUnSyncedEvent(context.Context, *ListUnSyncedEventRequest) (*ListUnSyncedEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnSyncedEvent not implemented")
}
func (UnimplementedNotifyServer) CommitSyncedEvent(context.Context, *CommitSyncedEventRequest) (*CommitSyncedEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitSyncedEvent not implemented")
}

// UnsafeNotifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifyServer will
// result in compilation errors.
type UnsafeNotifyServer interface {
	mustEmbedUnimplementedNotifyServer()
}

func RegisterNotifyServer(s grpc.ServiceRegistrar, srv NotifyServer) {
	s.RegisterService(&Notify_ServiceDesc, srv)
}

func _Notify_GetLatestSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestSequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).GetLatestSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Notify/GetLatestSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).GetLatestSequence(ctx, req.(*GetLatestSequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notify_ListUnSyncedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnSyncedEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).ListUnSyncedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Notify/ListUnSyncedEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).ListUnSyncedEvent(ctx, req.(*ListUnSyncedEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notify_CommitSyncedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitSyncedEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).CommitSyncedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Notify/CommitSyncedEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).CommitSyncedEvent(ctx, req.(*CommitSyncedEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Notify_ServiceDesc is the grpc.ServiceDesc for Notify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Notify",
	HandlerType: (*NotifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestSequence",
			Handler:    _Notify_GetLatestSequence_Handler,
		},
		{
			MethodName: "ListUnSyncedEvent",
			Handler:    _Notify_ListUnSyncedEvent_Handler,
		},
		{
			MethodName: "CommitSyncedEvent",
			Handler:    _Notify_CommitSyncedEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/apps/apis/fsapi/v1/fsapi-v1.proto",
}

// WorkflowClient is the client API for Workflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowClient interface {
	TriggerWorkflow(ctx context.Context, in *TriggerWorkflowRequest, opts ...grpc.CallOption) (*TriggerWorkflowResponse, error)
}

type workflowClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowClient(cc grpc.ClientConnInterface) WorkflowClient {
	return &workflowClient{cc}
}

func (c *workflowClient) TriggerWorkflow(ctx context.Context, in *TriggerWorkflowRequest, opts ...grpc.CallOption) (*TriggerWorkflowResponse, error) {
	out := new(TriggerWorkflowResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Workflow/TriggerWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServer is the server API for Workflow service.
// All implementations should embed UnimplementedWorkflowServer
// for forward compatibility
type WorkflowServer interface {
	TriggerWorkflow(context.Context, *TriggerWorkflowRequest) (*TriggerWorkflowResponse, error)
}

// UnimplementedWorkflowServer should be embedded to have forward compatible implementations.
type UnimplementedWorkflowServer struct {
}

func (UnimplementedWorkflowServer) TriggerWorkflow(context.Context, *TriggerWorkflowRequest) (*TriggerWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerWorkflow not implemented")
}

// UnsafeWorkflowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowServer will
// result in compilation errors.
type UnsafeWorkflowServer interface {
	mustEmbedUnimplementedWorkflowServer()
}

func RegisterWorkflowServer(s grpc.ServiceRegistrar, srv WorkflowServer) {
	s.RegisterService(&Workflow_ServiceDesc, srv)
}

func _Workflow_TriggerWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).TriggerWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Workflow/TriggerWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).TriggerWorkflow(ctx, req.(*TriggerWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Workflow_ServiceDesc is the grpc.ServiceDesc for Workflow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Workflow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Workflow",
	HandlerType: (*WorkflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerWorkflow",
			Handler:    _Workflow_TriggerWorkflow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/apps/apis/fsapi/v1/fsapi-v1.proto",
}
